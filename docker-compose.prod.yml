version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: frontend-image
    container_name: RandomFront
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - UniTrace-network
    volumes:
      - ./frontend/:/app

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    image: gin-backend-app
    container_name: GinBackendApp
    env_file: .env.prod
    restart: unless-stopped
    ports:
      - "$PORT:$PORT"
    depends_on:
      - postgres
      - redis
    networks:
      - UniTrace-network
    volumes:
      - ./backend/:/app
      - ./.env.prod:/root/.env

  postgres:
    image: postgres:13-alpine
    container_name: postgres
    env_file: .env.prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASS
      - POSTGRES_DB=$DB_NAME
    ports:
      - "$DB_PORT:$DB_PORT"
    networks:
      - UniTrace-network
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:6.0-alpine
    container_name: redis
    env_file: .env.prod
    restart: unless-stopped
    ports:
      - "$REDIS_PORT:$REDIS_PORT"
    environment:
      - REDIS_PASSWORD=$REDIS_PASS
    networks:
      - UniTrace-network
    volumes:
      - redisdata:/data

volumes:
  pgdata:
  redisdata:

networks:
  UniTrace-network:
    driver: bridge
